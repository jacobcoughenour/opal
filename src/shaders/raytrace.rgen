#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "random.glsl"
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 1) uniform CameraProperties {
	mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;
}
cam;

layout(push_constant) uniform Constants {
	vec4 clearColor;
	vec3 lightPosition;
	float lightIntensity;
	int lightType;
	int frame;
}
pushC;

void main() {

	// init random jitter seed
	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushC.frame);

	// jitter offset
	vec2 subpixel_jitter =
			// if new frame
			pushC.frame == 0
					// center of pixel
					? vec2(0.5f, 0.5f)
					// random point in the pixel
					: vec2(rnd(seed), rnd(seed));

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tMin = 0.001;
	float tMax = 10000.0;

	traceRayEXT(topLevelAS, // acceleration structure
			rayFlags, // rayFlags
			0xFF, // cullMask
			0, // sbtRecordOffset
			0, // sbtRecordStride
			0, // missIndex
			origin.xyz, // ray origin
			tMin, // ray min range
			direction.xyz, // ray direction
			tMax, // ray max range
			0 // payload (location = 0)
	);

	// if first frame
	if (pushC.frame == 0) {
		// replace previous frame
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.0));
	} else {
		// accumulate samples

		// get previous frame color
		vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;

		// mix with previous frames
		float a = 1.0f / float(pushC.frame + 1);
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, prd.hitValue, a), 1.0));
	}
}
